{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Parameters":{
      "LogGroupName":{
         "Type":"String",
         "Description": "The name of the CloudWatch log group",
         "Default":"/aws/events/s3"
      },
      "S3Bucket":{
         "Type":"String",
         "Default":"cf-demo-test"
      },
      "ScheduleExportJobInterval": {
          "Type": "String",
          "Description": "Export job interval",
          "Default": '10 minutes'
      }
   },
   "Resources":{
      "LogsResourcePolicy": {
          "Type": "AWS::Logs::ResourcePolicy",
          "Properties": {
              "PolicyName": {"Fn::Sub": "TrustEventsToStoreLogEventsS3"},
              "PolicyDocument": {"Fn::Sub": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"TrustEventsToStoreLogEventS3\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"delivery.logs.amazonaws.com\",\"events.amazonaws.com\"]},\"Action\":[\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Resource\":\"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupName}:*\"}]}"},
          }
      },

      "LogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
              "LogGroupName": {"Fn::Sub": "${LogGroupName}"}
          }
      },
      "CloudwatchRule":{
         "Type":"AWS::Events::Rule",
         "Properties":{
            "Description":"Event Rule",
            "EventPattern":{
               "source":[
                  "aws.s3"
               ]
            },
            "Name":"s3-rule-result",
            "State":"ENABLED",
            "Targets":[
               {
                  "Arn": {"Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupName}:*"},
                  "Id": {"Fn::Sub": "S3RuleId"},
                  "RetryPolicy":{
                     "MaximumRetryAttempts":4,
                     "MaximumEventAgeInSeconds":400
                  }
               }
            ]
         }
      },
    "LambdaRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "RoleName": "S3LambdaRoleExportToS3",
            "AssumeRolePolicyDocument": {
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "lambda.amazonaws.com",
                        },
                        "Action": "sts:AssumeRole"
                    }
                ]
            },
            "Policies": [{
                "PolicyName": "AWSLambdaExportToS3",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                                      "logs:listTagsLogGroup",
                                      "logs:TagLogGroup",
                                      "logs:CreateExportTask",
                                      "logs:CreateLogGroup",
                                      "logs:CreateLogStream",
                                      "logs:PutLogEvents"
                        ],
                        "Resource": "*"
                    }]
                }
            }]
        }
    },


    "S3BucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "Properties": {
            "Bucket": {"Fn::Sub": "${S3Bucket}"},
            "PolicyDocument": {
                "Statement": [
                    {
                        "Action": "s3:GetBucketAcl",
                        "Effect": "Allow",
                        "Resource": {"Fn::Sub": "arn:aws:s3:::${S3Bucket}"},
                        "Principal": {"Service": {"Fn::Sub": "logs.${AWS::Region}.amazonaws.com"}}
                    },
                    {
                        "Action": "s3:PutObject",
                        "Effect": "Allow",
                        "Resource": {"Fn::Sub": "arn:aws:s3:::${S3Bucket}/*"},
                        "Principal": {"Service": {"Fn::Sub": "logs.${AWS::Region}.amazonaws.com"}}
                    }
                ]
            }
        }
    },

    "ScheduleLambdaRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
            "Name": {"Fn::Sub": "S3ExportToS3"},
            "Description": {"Fn::Sub": "Schedule S3 lambda"},
            "ScheduleExpression": {"Fn::Sub": "rate(${ScheduleExportJobInterval})"},
            "State": "ENABLED",
            "Targets": [{
                "Arn": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
                "Id": {"Fn::Sub": "ScheduleLambdaRuleS3"}
            }]
        }
    },
    "PermissionForEventsToInvokeLambdaS3": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
            "FunctionName": {"Fn::Sub": "S3ExportToS3"},
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {"Fn::GetAtt": ["ScheduleLambdaRule", "Arn"]}
        }
    },

    "LambdaFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "FunctionName": {"Fn::Sub": "S3ExportToS3"},
            "Role": {
                "Fn::GetAtt": ["LambdaRole", "Arn"]
            },
            "Environment": {
                "Variables": {
                    "s3_bucket": {"Ref": "S3Bucket"},
                    "s3_prefix": {"Fn::Sub": "S3"},
                    "log_group_name": {"Fn::Sub": "${LogGroupName}"},
                }
            },
            "Runtime": "python3.9",
            "Handler": "index.lambda_handler",
            "Code": {
                "ZipFile": {
                    "Fn::Join": ["\n", [
"import os",
"import time",
"import json",
"import boto3",
"",
"",
"logs = boto3.client('logs')",
"",
"",
"def get_tag_name():",
"    return 'last_export_time'",
"",
"",
"def get_export_start_time(log_group_name):",
"    tags = logs.list_tags_log_group(logGroupName=log_group_name)",
"    return int(tags['tags'].get(get_tag_name(), 0))",
"",
"",
"def save_last_export_time(log_group_name, val):",
"    tags={get_tag_name(): str(val)}",
"    logs.tag_log_group(logGroupName=log_group_name, tags=tags)",
"",
"    return True",
"",
"",
"def lambda_handler(event, context):",
"    log_group_name = os.environ['log_group_name']",
"    s3_bucket = os.environ['s3_bucket']",
"    s3_prefix = os.environ['s3_prefix']",
"",
"    export_start_time = get_export_start_time(log_group_name)",
"    export_end_time = int(round((time.time() - 60) * 1000))",
"",
"    print('Log group name: %s' % log_group_name)",
"    print('S3 bucket: %s' % s3_bucket)",
"    print('S3 prefix: %s' % s3_prefix)",
"    print('export_start_time: %s' % export_start_time)",
"    print('export_end_time: %s' % export_end_time)",
"",
"    try:",
"        response = logs.create_export_task(",
"                       logGroupName=log_group_name,",
"                       fromTime=export_start_time,",
"                       to=export_end_time,",
"                       destination=s3_bucket,",
"                       destinationPrefix=s3_prefix",
"                   )",
"        print('Task created: %s' % response['taskId'])",
"",
"        save_last_export_time(log_group_name, export_end_time)",
"    except Exception as e:",
"        print('Got exception: %s' % str(e))",
"        raise e",
"",
"    return True",
                    ]]
                }
                
            }
        }
    }


   }
}
